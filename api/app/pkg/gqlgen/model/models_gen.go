// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type CreateItemGroupInput struct {
	Name string `json:"name"`
}

type CreateItemInput struct {
	Pid               string                  `json:"pid"`
	GroupID           *uuid.UUID              `json:"groupId,omitempty"`
	LocalFields       []LocalFieldInput       `json:"localFields,omitempty"`
	GlobalFieldValues []GlobalFieldValueInput `json:"globalFieldValues,omitempty"`
}

type GlobalField struct {
	ID   string          `json:"id"`
	Name string          `json:"name"`
	Type GlobalFieldType `json:"type"`
}

type GlobalFieldValue struct {
	FieldID   string  `json:"fieldId"`
	FieldName string  `json:"fieldName"`
	Value     *string `json:"value,omitempty"`
}

type GlobalFieldValueInput struct {
	FieldID string  `json:"fieldId"`
	Value   *string `json:"value,omitempty"`
}

type Item struct {
	ID                uuid.UUID          `json:"id"`
	Pid               string             `json:"pid"`
	Group             *ItemGroup         `json:"group,omitempty"`
	LocalFields       []LocalField       `json:"localFields,omitempty"`
	GlobalFieldValues []GlobalFieldValue `json:"globalFieldValues,omitempty"`
	CreatedAt         time.Time          `json:"createdAt"`
	UpdatedAt         *time.Time         `json:"updatedAt,omitempty"`
}

type ItemGroup struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type ItemGroupsFilter struct {
	Subject  ItemGroupsFilterSubject `json:"subject"`
	Operator FilterOperator          `json:"operator"`
	Value    *string                 `json:"value,omitempty"`
}

type ItemsFilter struct {
	Subject  ItemsFilterSubject `json:"subject"`
	Operator FilterOperator     `json:"operator"`
	Value    *string            `json:"value,omitempty"`
}

type LocalField struct {
	ID    string         `json:"id"`
	Name  string         `json:"name"`
	Type  LocalFieldType `json:"type"`
	Value *string        `json:"value,omitempty"`
}

type LocalFieldInput struct {
	Name  string         `json:"name"`
	Type  LocalFieldType `json:"type"`
	Value *string        `json:"value,omitempty"`
}

type Settings struct {
	ModuleInspectionsActive bool          `json:"moduleInspectionsActive"`
	GlobalFields            []GlobalField `json:"globalFields,omitempty"`
}

type UpdateActiveModulesInput struct {
	ModuleInspectionsActive *bool `json:"moduleInspectionsActive,omitempty"`
}

type FilterOperator string

const (
	FilterOperatorContains FilterOperator = "contains"
	FilterOperatorEquals   FilterOperator = "equals"
)

var AllFilterOperator = []FilterOperator{
	FilterOperatorContains,
	FilterOperatorEquals,
}

func (e FilterOperator) IsValid() bool {
	switch e {
	case FilterOperatorContains, FilterOperatorEquals:
		return true
	}
	return false
}

func (e FilterOperator) String() string {
	return string(e)
}

func (e *FilterOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOperator", str)
	}
	return nil
}

func (e FilterOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GlobalFieldType string

const (
	GlobalFieldTypeString           GlobalFieldType = "string"
	GlobalFieldTypeInteger          GlobalFieldType = "integer"
	GlobalFieldTypeFloat            GlobalFieldType = "float"
	GlobalFieldTypeInspectionStatus GlobalFieldType = "inspectionStatus"
)

var AllGlobalFieldType = []GlobalFieldType{
	GlobalFieldTypeString,
	GlobalFieldTypeInteger,
	GlobalFieldTypeFloat,
	GlobalFieldTypeInspectionStatus,
}

func (e GlobalFieldType) IsValid() bool {
	switch e {
	case GlobalFieldTypeString, GlobalFieldTypeInteger, GlobalFieldTypeFloat, GlobalFieldTypeInspectionStatus:
		return true
	}
	return false
}

func (e GlobalFieldType) String() string {
	return string(e)
}

func (e *GlobalFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GlobalFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GlobalFieldType", str)
	}
	return nil
}

func (e GlobalFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemGroupsFilterSubject string

const (
	ItemGroupsFilterSubjectName ItemGroupsFilterSubject = "name"
)

var AllItemGroupsFilterSubject = []ItemGroupsFilterSubject{
	ItemGroupsFilterSubjectName,
}

func (e ItemGroupsFilterSubject) IsValid() bool {
	switch e {
	case ItemGroupsFilterSubjectName:
		return true
	}
	return false
}

func (e ItemGroupsFilterSubject) String() string {
	return string(e)
}

func (e *ItemGroupsFilterSubject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemGroupsFilterSubject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemGroupsFilterSubject", str)
	}
	return nil
}

func (e ItemGroupsFilterSubject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemsFilterSubject string

const (
	ItemsFilterSubjectGroup ItemsFilterSubject = "group"
)

var AllItemsFilterSubject = []ItemsFilterSubject{
	ItemsFilterSubjectGroup,
}

func (e ItemsFilterSubject) IsValid() bool {
	switch e {
	case ItemsFilterSubjectGroup:
		return true
	}
	return false
}

func (e ItemsFilterSubject) String() string {
	return string(e)
}

func (e *ItemsFilterSubject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemsFilterSubject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemsFilterSubject", str)
	}
	return nil
}

func (e ItemsFilterSubject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type LocalFieldType string

const (
	LocalFieldTypeString  LocalFieldType = "string"
	LocalFieldTypeInteger LocalFieldType = "integer"
	LocalFieldTypeFloat   LocalFieldType = "float"
)

var AllLocalFieldType = []LocalFieldType{
	LocalFieldTypeString,
	LocalFieldTypeInteger,
	LocalFieldTypeFloat,
}

func (e LocalFieldType) IsValid() bool {
	switch e {
	case LocalFieldTypeString, LocalFieldTypeInteger, LocalFieldTypeFloat:
		return true
	}
	return false
}

func (e LocalFieldType) String() string {
	return string(e)
}

func (e *LocalFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = LocalFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid LocalFieldType", str)
	}
	return nil
}

func (e LocalFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
