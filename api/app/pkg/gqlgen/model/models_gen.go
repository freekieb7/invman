// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type CreateItemGroupInput struct {
	Name string `json:"name"`
}

type CreateItemInput struct {
	Pid                   string                      `json:"pid"`
	GroupID               *uuid.UUID                  `json:"groupID,omitempty"`
	LocalFields           []CustomFieldInput          `json:"localFields,omitempty"`
	GlobalFieldValuesOnly []CustomFieldValueOnlyInput `json:"globalFieldValuesOnly,omitempty"`
}

type CustomField struct {
	ID      string          `json:"id"`
	Name    string          `json:"name"`
	Type    CustomFieldType `json:"type"`
	Enabled bool            `json:"enabled"`
	Value   *string         `json:"value,omitempty"`
}

type CustomFieldInput struct {
	Name  string          `json:"name"`
	Type  CustomFieldType `json:"type"`
	Value string          `json:"value"`
}

type CustomFieldValueInput struct {
	FieldID string  `json:"fieldID"`
	Value   *string `json:"value,omitempty"`
}

type CustomFieldValueOnlyInput struct {
	ID    string  `json:"id"`
	Value *string `json:"value,omitempty"`
}

type Item struct {
	ID           uuid.UUID     `json:"id"`
	Pid          string        `json:"pid"`
	Group        *ItemGroup    `json:"group,omitempty"`
	LocalFields  []CustomField `json:"localFields,omitempty"`
	GlobalFields []CustomField `json:"globalFields,omitempty"`
	CreatedAt    time.Time     `json:"createdAt"`
	UpdatedAt    *time.Time    `json:"updatedAt,omitempty"`
}

type ItemGroup struct {
	ID        uuid.UUID  `json:"id"`
	Name      string     `json:"name"`
	CreatedAt time.Time  `json:"createdAt"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

type ItemGroupsFilter struct {
	Subject  ItemGroupsFilterSubject `json:"subject"`
	Operator FilterOperator          `json:"operator"`
	Value    *string                 `json:"value,omitempty"`
}

type ItemsFilter struct {
	Subject  ItemsFilterSubject `json:"subject"`
	Operator FilterOperator     `json:"operator"`
	Value    *string            `json:"value,omitempty"`
}

type Settings struct {
	ModInspectionsActive bool          `json:"modInspectionsActive"`
	GlobalFields         []CustomField `json:"GlobalFields,omitempty"`
}

type UpdateSettingsInput struct {
	ModInspectionsActive *bool `json:"modInspectionsActive,omitempty"`
}

type CustomFieldType string

const (
	CustomFieldTypeString           CustomFieldType = "string"
	CustomFieldTypeInteger          CustomFieldType = "integer"
	CustomFieldTypeFloat            CustomFieldType = "float"
	CustomFieldTypeInspectionStatus CustomFieldType = "inspectionStatus"
)

var AllCustomFieldType = []CustomFieldType{
	CustomFieldTypeString,
	CustomFieldTypeInteger,
	CustomFieldTypeFloat,
	CustomFieldTypeInspectionStatus,
}

func (e CustomFieldType) IsValid() bool {
	switch e {
	case CustomFieldTypeString, CustomFieldTypeInteger, CustomFieldTypeFloat, CustomFieldTypeInspectionStatus:
		return true
	}
	return false
}

func (e CustomFieldType) String() string {
	return string(e)
}

func (e *CustomFieldType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomFieldType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomFieldType", str)
	}
	return nil
}

func (e CustomFieldType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type FilterOperator string

const (
	FilterOperatorContains FilterOperator = "contains"
	FilterOperatorEquals   FilterOperator = "equals"
)

var AllFilterOperator = []FilterOperator{
	FilterOperatorContains,
	FilterOperatorEquals,
}

func (e FilterOperator) IsValid() bool {
	switch e {
	case FilterOperatorContains, FilterOperatorEquals:
		return true
	}
	return false
}

func (e FilterOperator) String() string {
	return string(e)
}

func (e *FilterOperator) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterOperator(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilterOperator", str)
	}
	return nil
}

func (e FilterOperator) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemGroupsFilterSubject string

const (
	ItemGroupsFilterSubjectName ItemGroupsFilterSubject = "name"
)

var AllItemGroupsFilterSubject = []ItemGroupsFilterSubject{
	ItemGroupsFilterSubjectName,
}

func (e ItemGroupsFilterSubject) IsValid() bool {
	switch e {
	case ItemGroupsFilterSubjectName:
		return true
	}
	return false
}

func (e ItemGroupsFilterSubject) String() string {
	return string(e)
}

func (e *ItemGroupsFilterSubject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemGroupsFilterSubject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemGroupsFilterSubject", str)
	}
	return nil
}

func (e ItemGroupsFilterSubject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ItemsFilterSubject string

const (
	ItemsFilterSubjectGroup ItemsFilterSubject = "group"
)

var AllItemsFilterSubject = []ItemsFilterSubject{
	ItemsFilterSubjectGroup,
}

func (e ItemsFilterSubject) IsValid() bool {
	switch e {
	case ItemsFilterSubjectGroup:
		return true
	}
	return false
}

func (e ItemsFilterSubject) String() string {
	return string(e)
}

func (e *ItemsFilterSubject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ItemsFilterSubject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ItemsFilterSubject", str)
	}
	return nil
}

func (e ItemsFilterSubject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
