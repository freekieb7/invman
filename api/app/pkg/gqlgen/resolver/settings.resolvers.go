package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"invman/api/pkg/app/datasource/database/entity"
	gql "invman/api/pkg/gqlgen/model"
)

// UpdateActiveModules is the resolver for the updateActiveModules field.
func (r *mutationResolver) UpdateActiveModules(ctx context.Context, input gql.UpdateActiveModulesInput) (bool, error) {
	settings, err := r.SettingsRepository.Get()

	if err != nil {
		return false, err
	}

	if input.ModuleInspectionsActive != nil {
		settings.ModuleInspectionsActive = *input.ModuleInspectionsActive

		exists := false
		for index, field := range settings.GlobalFields.V {
			if field.ID == "inspection_status" {
				exists = true
				settings.GlobalFields.V[index].Enabled = settings.ModuleInspectionsActive
			}
		}

		if !exists {
			settings.GlobalFields.V = append(settings.GlobalFields.V, entity.GlobalField{
				ID: "inspection_status",
				Translation: entity.FieldTranslation{
					Default: "Inspection status",
				},
				Type:    "inspection_status",
				Enabled: settings.ModuleInspectionsActive,
			})
		}
	}

	if err := r.SettingsRepository.Update(settings); err != nil {
		return false, err
	}

	return true, err
}

// Settings is the resolver for the settings field.
func (r *queryResolver) Settings(ctx context.Context) (*gql.Settings, error) {
	var gqlSettings gql.Settings

	settings, err := r.SettingsRepository.Get()

	if err != nil {
		return nil, err
	}

	settings.CopyTo(&gqlSettings)

	return &gqlSettings, nil
}
