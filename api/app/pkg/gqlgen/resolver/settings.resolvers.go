package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"invman/api/pkg/app/datasource/database/entity"
	gql "invman/api/pkg/gqlgen/model"

	"github.com/google/uuid"
)

// UpdateActiveModules is the resolver for the updateActiveModules field.
func (r *mutationResolver) UpdateActiveModules(ctx context.Context, input gql.UpdateActiveModulesInput) (bool, error) {
	settings, err := r.SettingsRepository.Get()

	if err != nil {
		return false, err
	}

	if err := r.SettingsRepository.Update(settings); err != nil {
		return false, err
	}

	return true, err
}

// AddCustomFieldToItem is the resolver for the addCustomFieldToItem field.
func (r *mutationResolver) AddCustomFieldToItem(ctx context.Context, input gql.AddItemCustomFieldInput) (bool, error) {
	settings, err := r.SettingsRepository.Get()

	if err != nil {
		return false, err
	}

	settings.ItemsCustomFields = entity.CustomFields{
		V: make(map[string]interface{}),
	}

	if input.TextCustomField != nil {
		customFieldId := uuid.NewString()
		settings.ItemsCustomFields.V[customFieldId] = &entity.TextCustomField{
			CustomField: entity.CustomField{
				ID: customFieldId,
				Translations: entity.Translations{
					Default: input.TextCustomField.CustomField.Name,
				},
				Type: "TextCustomField",
			},
			OnEmptyValue: input.TextCustomField.OnEmptyValue,
		}
	}

	if err := r.SettingsRepository.Update(settings); err != nil {
		return false, err
	}

	return true, nil
}

// Settings is the resolver for the settings field.
func (r *queryResolver) Settings(ctx context.Context) (*gql.Settings, error) {
	var gqlSettings gql.Settings

	settings, err := r.SettingsRepository.Get()

	if err != nil {
		return nil, err
	}

	settings.CopyTo(&gqlSettings)

	return &gqlSettings, nil
}
