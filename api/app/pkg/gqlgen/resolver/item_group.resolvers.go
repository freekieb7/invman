package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"
	"invman/api/pkg/app/datasource/database/entity"
	gql "invman/api/pkg/gqlgen/model"

	"github.com/google/uuid"
)

// CreateItemGroup is the resolver for the createItemGroup field.
func (r *mutationResolver) CreateItemGroup(ctx context.Context, input gql.CreateItemGroupInput) (*gql.ItemGroup, error) {
	itemGroup := entity.ItemGroup{
		ID:   uuid.New(),
		Name: input.Name,
	}

	err := r.ItemGroupRepository.Create(itemGroup)

	if err != nil {
		return nil, err
	}

	return r.Resolver.Query().ItemGroup(ctx, itemGroup.ID)
}

// DeleteItemGroup is the resolver for the deleteItemGroup field.
func (r *mutationResolver) DeleteItemGroup(ctx context.Context, id uuid.UUID) (bool, error) {
	err := r.ItemGroupRepository.Delete(id)

	if err != nil {
		return false, err
	}

	return true, err
}

// ItemGroup is the resolver for the itemGroup field.
func (r *queryResolver) ItemGroup(ctx context.Context, id uuid.UUID) (*gql.ItemGroup, error) {
	var gqlItemGroup gql.ItemGroup

	group, err := r.ItemGroupRepository.Get(id)

	if err != nil {
		return nil, err
	}

	gqlItemGroup.ID = group.ID
	gqlItemGroup.Name = group.Name
	gqlItemGroup.CreatedAt = group.CreatedAt
	gqlItemGroup.UpdatedAt = group.UpdatedAt

	return &gqlItemGroup, nil
}

// ItemGroups is the resolver for the itemGroups field.
func (r *queryResolver) ItemGroups(ctx context.Context, limit int, offset *int, filters []gql.ItemGroupsFilter) ([]gql.ItemGroup, error) {
	var gqlItemGroups []gql.ItemGroup

	MAX_LIMIT := 100
	if limit > MAX_LIMIT {
		return nil, fmt.Errorf("validation: limit may not exceed %d", MAX_LIMIT)
	}

	itemGroups, err := r.ItemGroupRepository.List(limit, offset, filters)

	if err != nil {
		return nil, err
	}

	for _, group := range itemGroups {
		var gqlItemGroup gql.ItemGroup

		gqlItemGroup.ID = group.ID
		gqlItemGroup.Name = group.Name
		gqlItemGroup.CreatedAt = group.CreatedAt
		gqlItemGroup.UpdatedAt = group.UpdatedAt

		gqlItemGroups = append(gqlItemGroups, gqlItemGroup)
	}

	return gqlItemGroups, nil
}
