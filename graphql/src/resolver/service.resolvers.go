package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"errors"

	guuid "github.com/google/uuid"
	"invman.com/graphql/graph/generated"
	"invman.com/graphql/graph/graph_model"
)

// CreateService is the resolver for the createService field.
func (r *mutationResolver) CreateService(ctx context.Context, input graph_model.NewService) (*graph_model.Service, error) {
	uuid, err := r.usecases.Service.Create(input.Name)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuid)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt.String(),
		UpdatedAt: service.UpdatedAt.String(),
	}, nil
}

// UpdateService is the resolver for the updateService field.
func (r *mutationResolver) UpdateService(ctx context.Context, input graph_model.UpdateService) (*graph_model.Service, error) {
	uuid, err := guuid.Parse(input.UUID)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuid)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt.String(),
		UpdatedAt: service.UpdatedAt.String(),
	}, nil
}

// DeleteService is the resolver for the deleteService field.
func (r *mutationResolver) DeleteService(ctx context.Context, uuid string) (bool, error) {
	uuidParsed, err := guuid.Parse(uuid)

	if err != nil {
		return false, err
	}

	if err := r.usecases.Service.Delete(uuidParsed); err != nil {
		return false, err
	}

	return true, nil
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, uuid string) (*graph_model.Service, error) {
	uuidParsed, err := guuid.Parse(uuid)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuidParsed)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt.String(),
		UpdatedAt: service.UpdatedAt.String(),
	}, nil
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context, first *int, after *string, last *int, before *string) (*graph_model.ServiceConnection, error) {
	// Validate data
	if first == nil && last == nil {
		return nil, errors.New("illegal parameters found: first or last needs to be specified")
	}

	if first != nil && last != nil {
		return nil, errors.New("illegal parameters found: first and last cannot at the same time")
	}

	// Prep data
	if first != nil {
		*first++
	}

	if last != nil {
		*last++
	}

	services, err := r.usecases.Service.FindList(first, after, last, before)

	if err != nil {
		return nil, err
	}

	hasNextPage := false
	if first != nil {
		*first-- // Remove additional entry

		if len(services) > *first {
			hasNextPage = true
			services = services[:len(services)-1] // Pop last
		}
	}

	hasPreviousPage := false
	if last != nil {
		*last-- // Remove additional entry

		if len(services) > *last {
			hasPreviousPage = true
			services = services[1:] // Pop first
		}
	}

	var graphServices []*graph_model.ServiceEdge

	for _, service := range services {
		graphServices = append(graphServices, &graph_model.ServiceEdge{
			Node: &graph_model.Service{
				UUID:      service.UUID.String(),
				Name:      service.Name,
				CreatedAt: service.CreatedAt.String(),
				UpdatedAt: service.UpdatedAt.String(),
			},
			Cursor: service.UUID.String(),
		})
	}

	var startCursor *string
	var endCursor *string

	if len(services) > 0 {
		startCursor = &graphServices[0].Cursor
		endCursor = &graphServices[len(services)-1].Cursor
	}

	return &graph_model.ServiceConnection{
		Edges: graphServices,
		PageInfo: &graph_model.PageInfo{
			StartCursor:     startCursor,
			EndCursor:       endCursor,
			HasNextPage:     hasNextPage,
			HasPreviousPage: hasPreviousPage,
		},
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
