package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	guuid "github.com/google/uuid"
	"invman.com/graphql/graph/generated"
	"invman.com/graphql/graph/graph_model"
)

// CreateService is the resolver for the createService field.
func (r *mutationResolver) CreateService(ctx context.Context, input graph_model.CreateServiceInput) (*graph_model.Service, error) {
	uuid, err := r.usecases.Service.Create(input.Name)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuid)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt,
		UpdatedAt: service.UpdatedAt,
	}, nil
}

// UpdateService is the resolver for the updateService field.
func (r *mutationResolver) UpdateService(ctx context.Context, input graph_model.UpdateServiceInput) (*graph_model.Service, error) {
	uuid, err := guuid.Parse(input.UUID)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuid)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt,
		UpdatedAt: service.UpdatedAt,
	}, nil
}

// DeleteService is the resolver for the deleteService field.
func (r *mutationResolver) DeleteService(ctx context.Context, uuid string) (bool, error) {
	uuidParsed, err := guuid.Parse(uuid)

	if err != nil {
		return false, err
	}

	if err := r.usecases.Service.Delete(uuidParsed); err != nil {
		return false, err
	}

	return true, nil
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, uuid string) (*graph_model.Service, error) {
	uuidParsed, err := guuid.Parse(uuid)

	if err != nil {
		return nil, err
	}

	service, err := r.usecases.Service.Find(uuidParsed)

	if err != nil {
		return nil, err
	}

	return &graph_model.Service{
		UUID:      service.UUID.String(),
		Name:      service.Name,
		CreatedAt: service.CreatedAt,
		UpdatedAt: service.UpdatedAt,
	}, nil
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context, input graph_model.ServicesInput) ([]*graph_model.Service, error) {
	services, err := r.usecases.Service.FindList(input)

	if err != nil {
		return nil, err
	}

	var graphServices []*graph_model.Service

	for _, service := range services {
		graphServices = append(graphServices, &graph_model.Service{
			UUID:      service.UUID.String(),
			Name:      service.Name,
			CreatedAt: service.CreatedAt,
			UpdatedAt: service.UpdatedAt,
		})
	}

	return graphServices, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
