package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"

	"invman.com/graphql/graph/generated"
	gmodel "invman.com/graphql/graph/model"
	"invman.com/graphql/src/api"
)

// CreateService is the resolver for the createService field.
func (r *mutationResolver) CreateService(ctx context.Context, input gmodel.NewService) (*gmodel.Service, error) {
	api := api.NewServiceApi()

	service, err := api.CreateService(input.Name)

	if err != nil {
		return nil, err
	}

	return &gmodel.Service{
		ID:        int(service.ID),
		Name:      service.Name,
		CreatedAt: service.CreatedAt.String(),
		UpdatedAt: service.UpdatedAt.String(),
	}, nil
}

// Service is the resolver for the service field.
func (r *queryResolver) Service(ctx context.Context, id int) (*gmodel.Service, error) {
	api := api.NewServiceApi()

	service, err := api.GetService(uint(id))

	if err != nil {
		return nil, err
	}

	return &gmodel.Service{
		ID:        int(service.ID),
		Name:      service.Name,
		CreatedAt: service.CreatedAt.String(),
		UpdatedAt: service.UpdatedAt.String(),
	}, nil
}

// Services is the resolver for the services field.
func (r *queryResolver) Services(ctx context.Context) ([]*gmodel.Service, error) {
	api := api.NewServiceApi()

	serviceList, err := api.GetServiceList()

	if err != nil {
		return nil, err
	}

	var gServiceList []*gmodel.Service

	for _, service := range serviceList {
		gServiceList = append(gServiceList, &gmodel.Service{
			ID:        int(service.ID),
			Name:      service.Name,
			CreatedAt: service.CreatedAt.String(),
			UpdatedAt: service.UpdatedAt.String(),
		})
	}

	return gServiceList, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
