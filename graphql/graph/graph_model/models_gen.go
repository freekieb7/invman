// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph_model

import (
	"fmt"
	"io"
	"strconv"
)

type NewService struct {
	Name string `json:"name"`
}

type Service struct {
	UUID      string `json:"uuid"`
	Name      string `json:"name"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type ServiceOrderBy struct {
	Name  ServiceSubject `json:"name"`
	Order OrderBy        `json:"order"`
}

type UpdateService struct {
	UUID string `json:"uuid"`
	Name string `json:"name"`
}

type OrderBy string

const (
	OrderByAsc  OrderBy = "ASC"
	OrderByDesc OrderBy = "DESC"
)

var AllOrderBy = []OrderBy{
	OrderByAsc,
	OrderByDesc,
}

func (e OrderBy) IsValid() bool {
	switch e {
	case OrderByAsc, OrderByDesc:
		return true
	}
	return false
}

func (e OrderBy) String() string {
	return string(e)
}

func (e *OrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderBy", str)
	}
	return nil
}

func (e OrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ServiceSubject string

const (
	ServiceSubjectUUID      ServiceSubject = "uuid"
	ServiceSubjectName      ServiceSubject = "name"
	ServiceSubjectCreatedAt ServiceSubject = "createdAt"
	ServiceSubjectUpdatedAt ServiceSubject = "updatedAt"
)

var AllServiceSubject = []ServiceSubject{
	ServiceSubjectUUID,
	ServiceSubjectName,
	ServiceSubjectCreatedAt,
	ServiceSubjectUpdatedAt,
}

func (e ServiceSubject) IsValid() bool {
	switch e {
	case ServiceSubjectUUID, ServiceSubjectName, ServiceSubjectCreatedAt, ServiceSubjectUpdatedAt:
		return true
	}
	return false
}

func (e ServiceSubject) String() string {
	return string(e)
}

func (e *ServiceSubject) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ServiceSubject(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ServiceSubject", str)
	}
	return nil
}

func (e ServiceSubject) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
