version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: ./nginx/prod.Dockerfile
    volumes:
      - ./logs/nginx:/var/log/nginx/
    depends_on:
      next-js:
        condition: service_started
      graphql:
        condition: service_started
    networks:
      - public-network
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_INVMAN_AUTH_HOST=${INVMAN_AUTH_HOST}
      - NGINX_INVMAN_APP_HOST=${INVMAN_APP_HOST}
      - NGINX_INVMAN_API_HOST=${INVMAN_API_HOST}
      - NGINX_INVMAN_NEXT_JS_HOST=https://next-js:3000 #todo
      - NGINX_INVMAN_GRAPHQL_HOST=https://graphql:8080 #todo
      - NGINX_INVMAN_AUTH_APP_HOST=https://auth-app:8080 #todo

  next-js:
    container_name: next-js
    build:
      context: ./next-js
      dockerfile: docker/prod.Dockerfile
    networks:
      - public-network
    depends_on:
      auth-app:
        condition: service_started
      graphql:
        condition: service_started
    environment:
      - NEXTAUTH_URL=${INVMAN_APP_URL}/api/auth
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_INVMAN_CLIENT_ID=${INVMAN_AUTH_CLIENT_ID}
      - NEXTAUTH_INVMAN_CLIENT_SECRET=${INVMAN_AUTH_CLIENT_SECRET}
      - INVMAN_AUTH_URL=${INVMAN_AUTH_URL}
      - NEXT_PUBLIC_INVMAN_API_URL=${INVMAN_API_URL}

  graphql:
    container_name: graphql
    build:
      context: ./graphql
      dockerfile: prod.Dockerfile
    networks:
      - public-network
      - service-network
    depends_on:
      - service-postgres
    environment:
      - TOKEN_SECRET=${INVMAN_ACCESS_TOKEN_SECRET}
      - INVMAN_APP_URL=${INVMAN_APP_URL}
      - DATABASE_HOST=service-postgres
      - DATABASE_USER=${SERVICE_POSTGRES_USER}
      - DATABASE_PASSWORD=${SERVICE_POSTGRES_PASSWORD}
      - DATABASE_PORT=${SERVICE_POSTGRES_PORT}
      - DATABASE_NAME=${SERVICE_POSTGRES_NAME}

  auth-app:
    container_name: auth-app
    build:
      context: ./services/auth/app
      dockerfile: prod.Dockerfile
    volumes:
      - ./services/auth/app:/app
    depends_on:
      - auth-redis
      - auth-postgres
    networks:
      - public-network
      - auth-network
    environment:
      - CLIENT_ID=${INVMAN_AUTH_CLIENT_ID}
      - CLIENT_SECRET=${INVMAN_AUTH_CLIENT_SECRET}
      - TOKEN_SECRET=${INVMAN_ACCESS_TOKEN_SECRET}
      - INVMAN_APP_URL=${INVMAN_APP_URL}
      - INVMAN_AUTH_URL=${INVMAN_AUTH_URL}
      - DATABASE_HOST=auth-postgres
      - DATABASE_USER=${AUTH_POSTGRES_USER}
      - DATABASE_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - DATABASE_PORT=${AUTH_POSTGRES_PORT}
      - DATABASE_NAME=${AUTH_POSTGRES_NAME}
      - REDIS_HOST=auth-redis:6379

  auth-redis:
    container_name: auth-redis
    image: "redis:alpine"
    # command: redis-server --requirepass ${AUTH_REDIS_PASSWORD}
    volumes:
      - ./services/auth/redis/data:/var/lib/redis
      # - ./services/oauth/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - auth-network

  auth-postgres:
    container_name: auth-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    volumes:
      - ./services/auth/pg/data:/var/lib/postgresql/data
    networks:
      - auth-network
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d ${AUTH_POSTGRES_PASSWORD}'"]
    #   interval: 10s
    #   timeout: 3s
    #   retries: 3

  service-postgres:
    container_name: service-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${SERVICE_POSTGRES_PASSWORD}
    volumes:
      - ./services/service/pg/data:/var/lib/postgresql/data
    networks:
      - service-network
    # healthcheck:
    #   test: ["CMD-SHELL", "sh -c 'pg_isready -U postgres -d ${SERVICE_POSTGRES_PASSWORD}'"]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 3

networks:
  public-network:
  auth-network:
  service-network: 