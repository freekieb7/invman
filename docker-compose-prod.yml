version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: prod.Dockerfile
    volumes:
      - ./logs/nginx:/var/log/nginx/
    depends_on:
      app:
        condition: service_started
      auth:
        condition: service_started
      api:
        condition: service_started
    networks:
      - general-network
    ports:
      - 80:80
      - 443:443
    environment:
      DOMAIN: ${DOMAIN}
      APP_DOMAIN: ${APP_DOMAIN}
      APP_DOMAIN_INTERNAL: app
      APP_PORT_INTERNAL: 3000
      API_DOMAIN: ${API_DOMAIN}
      API_DOMAIN_INTERNAL: api
      API_PORT_INTERNAL: 8080
      AUTH_DOMAIN: ${AUTH_DOMAIN}
      AUTH_DOMAIN_INTERNAL: auth
      AUTH_PORT_INTERNAL: 8080

  nginx-metrics-exporter:
    container_name: nginx-metrics-exporter
    image: nginx/nginx-prometheus-exporter
    depends_on:
      - nginx
    networks:
      - general-network
    command:
      - -nginx.scrape-uri=http://nginx/nginx_status

  app:
    container_name: app
    build:
      context: ./app
      dockerfile: docker/prod.Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=https://${API_DOMAIN}
    volumes:
      - ./app/src:/app/src
      - ./app/public:/app/public
    networks:
      - general-network
    environment:
      AUTH_URL: https://${AUTH_DOMAIN}
      AUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      NEXT_TELEMETRY_DISABLED: 1
      NEXT_PUBLIC_API_URL: https://${API_DOMAIN}
      NEXTAUTH_URL: https://${APP_DOMAIN}/api/auth
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: prod.Dockerfile
    volumes:
      - ./api:/app
    networks:
      - general-network
    depends_on:
      service-postgres:
        condition: service_healthy
    environment:
      ACCESS_TOKEN_SECRET: ${API_ACCESS_TOKEN_SECRET}
      APP_URL: https://${APP_DOMAIN}
      DATABASE_HOST: service-postgres
      DATABASE_USER: ${SERVICE_POSTGRES_USER}
      DATABASE_PASSWORD: ${SERVICE_POSTGRES_PASSWORD}
      DATABASE_PORT: ${SERVICE_POSTGRES_PORT}
      DATABASE_NAME: ${SERVICE_POSTGRES_DB}

  auth:
    container_name: auth
    build:
      context: ./auth/app
      dockerfile: prod.Dockerfile
    volumes:
      - ./auth/app:/app
    depends_on:
      auth-redis:
        condition: service_started
      auth-postgres:
        condition: service_healthy
    networks:
      - general-network
    environment:
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      API_ACCESS_TOKEN_SECRET: ${API_ACCESS_TOKEN_SECRET}
      POSTGRES_HOST: auth-postgres
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_PORT: ${AUTH_POSTGRES_PORT}
      POSTGRES_NAME: ${AUTH_POSTGRES_DB}
      REDIS_HOST: auth-redis
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}

  auth-redis:
    container_name: auth-redis
    image: "redis:alpine"
    command: redis-server --requirepass ${AUTH_REDIS_PASSWORD}
    volumes:
      - ./auth/redis/data:/var/lib/redis
    networks:
      - general-network

  auth-postgres:
    container_name: auth-postgres
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
    volumes:
      - ./auth/pg/data:/var/lib/postgresql/data
    networks:
      - general-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  service-postgres:
    container_name: service-postgres
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${SERVICE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${SERVICE_POSTGRES_DB}
    volumes:
      - ./service/pg/data:/var/lib/postgresql/data
    networks:
      - general-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${SERVICE_POSTGRES_USER} -d ${SERVICE_POSTGRES_DB}'"]
      interval: 10s
      timeout: 3s
      retries: 3

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    networks:
      - general-network
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    container_name: grafana
    image: grafana/grafana-oss
    networks:
      - general-network
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: redis-datasource

networks:
  general-network:

volumes:
  prometheus_data:
  grafana_data: