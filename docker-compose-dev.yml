version: '3'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: dev.Dockerfile
    volumes:
      - ./ui/:/var/www/html/
      - ./logs/nginx:/var/log/nginx/
    depends_on:
       - next-js
       - graphql
    networks:
      - public-network
    ports:
      - "80:80"
    environment:
      - NGINX_INVMAN_AUTH_HOST=${INVMAN_AUTH_HOST}
      - NGINX_INVMAN_APP_HOST=${INVMAN_APP_HOST}
      - NGINX_INVMAN_API_HOST=${INVMAN_API_HOST}
      - NGINX_INVMAN_NEXT_JS_HOST=http://next-js:3000
      - NGINX_INVMAN_GRAPHQL_HOST=http://graphql:8080
      - NGINX_INVMAN_AUTH_APP_HOST=http://auth-app:8080

  next-js:
    container_name: next-js
    build:
      context: ./next-js
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./next-js/src:/app/src
      - ./next-js/public:/app/public
    networks:
      - public-network
    depends_on:
      - auth-app
      - graphql
    environment:
      - NEXTAUTH_URL=${INVMAN_APP_URL}/api/auth
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_INVMAN_CLIENT_ID=${INVMAN_AUTH_CLIENT_ID}
      - NEXTAUTH_INVMAN_CLIENT_SECRET=${INVMAN_AUTH_CLIENT_SECRET}
      - INVMAN_AUTH_URL=${INVMAN_AUTH_URL}
      - NEXT_PUBLIC_INVMAN_API_URL=${INVMAN_API_URL}

  graphql:
    container_name: graphql
    build:
      context: ./graphql
      dockerfile: dev.Dockerfile
    volumes:
      - ./graphql:/app
    networks:
      - public-network
      - service-network
    depends_on:
      - service-postgres
    environment:
      - INVMAN_APP_URL=${INVMAN_APP_URL}
      - DATABASE_HOST=service-postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres

  auth-app:
    container_name: auth-app
    build:
      context: ./services/auth/app
      dockerfile: dev.Dockerfile
    volumes:
      - ./services/auth/app:/app
    depends_on:
      - auth-redis
      - auth-postgres
    networks:
      - public-network
      - auth-network
    environment:
      - CLIENT_ID=${INVMAN_AUTH_CLIENT_ID}
      - CLIENT_SECRET=${INVMAN_AUTH_CLIENT_SECRET}
      - INVMAN_APP_URL=${INVMAN_APP_URL}
      - INVMAN_AUTH_URL=${INVMAN_AUTH_URL}
      - DATABASE_HOST=auth-postgres
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_PORT=5432
      - DATABASE_NAME=postgres
      - REDIS_HOST=auth-redis:6379

  auth-redis:
    container_name: auth-redis
    image: "redis:alpine"
    # command: redis-server --requirepass sOmE_sEcUrE_pAsS
    volumes:
      - ./services/auth/redis/data:/var/lib/redis
      # - ./services/oauth/redis/config/redis.conf:/usr/local/etc/redis/redis.conf
    # environment:
    #  - REDIS_REPLICATION_MODE=master
    networks:
      - auth-network

  auth-postgres:
    container_name: auth-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./services/auth/pg/data:/var/lib/postgresql/data
    networks:
      - auth-network

  service-postgres:
    container_name: service-postgres
    image: postgres
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./services/service/pg/data:/var/lib/postgresql/data
    networks:
      - service-network

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - auth-network

networks:
  public-network:
  auth-network:
  service-network:


