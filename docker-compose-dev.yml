version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./logs/nginx:/var/log/nginx/
    networks:
      - general-network
    ports:
      - 80:80 # HTTP
    depends_on:
      - app
      - auth
      - api
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 3s
      retries: 3

  app:
    container_name: app
    build:
      context: ./app
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./app/src:/app/src
      - ./app/public:/app/public
    networks:
      - general-network
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      AUTH_URL: ${AUTH_PUBLIC_HOST}
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}

  auth:
    container_name: auth
    build:
      context: ./auth/app
      dockerfile: build/dev.Dockerfile
    volumes:
      - ./auth/app:/app
    environment:
      APP_HOST: ${APP_PUBLIC_HOST}
      PUBLIC_HOST: ${AUTH_PUBLIC_HOST}
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      POSTGRES_HOST: auth-postgres
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_PORT: ${AUTH_POSTGRES_PORT}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
      REDIS_HOST: auth-redis
      REDIS_NR: ${AUTH_REDIS_NR}
      REDIS_PORT: ${AUTH_REDIS_PORT}
      REDIS_PASSWORD: ${AUTH_REDIS_PASSWORD}
    depends_on:
      auth-redis:
        condition: service_healthy
      auth-postgres:
        condition: service_healthy
    networks:
      - general-network

  auth-redis:
    container_name: auth-redis
    image: redis/redis-stack:latest
    volumes:
      - auth_redis_data:/data
    networks:
      - general-network
    ports:
      - 8001:8001
    environment:
      REDIS_ARGS: "--requirepass ${AUTH_REDIS_PASSWORD}"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 3s
      retries: 3

  auth-postgres:
    container_name: auth-postgres
    image: postgres:alpine
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    networks:
      - general-network
    environment:
      POSTGRES_DB: ${AUTH_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${AUTH_POSTGRES_USER} -d ${AUTH_POSTGRES_DB}'"
        ]
      interval: 10s
      timeout: 3s
      retries: 3

  api:
    container_name: api
    build:
      context: ./api/app
      dockerfile: build/dev.Dockerfile
    volumes:
      - ./api/app:/app
    environment:
      APP_HOST: ${APP_PUBLIC_HOST}
      POSTGRES_HOST: api-postgres
      POSTGRES_DB: ${API_POSTGRES_DB}
      POSTGRES_PORT: ${API_POSTGRES_PORT}
      POSTGRES_USER: ${API_POSTGRES_USER}
      POSTGRES_PASSWORD: ${API_POSTGRES_PASSWORD}
    depends_on:
      api-postgres:
        condition: service_healthy
    networks:
      - general-network

  api-postgres:
    container_name: api-postgres
    image: postgres:alpine
    volumes:
      - api_postgres_data:/var/lib/postgresql/data
    networks:
      - general-network
    environment:
      POSTGRES_DB: ${API_POSTGRES_DB}
      POSTGRES_USER: ${API_POSTGRES_USER}
      POSTGRES_PASSWORD: ${API_POSTGRES_PASSWORD}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${API_POSTGRES_USER} -d ${API_POSTGRES_DB}'"
        ]
      interval: 10s
      timeout: 3s
      retries: 3

  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - general-network

networks:
  general-network:


volumes:
  auth_postgres_data:
  auth_redis_data:
  api_postgres_data:
