version: '3'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: dev.Dockerfile
    restart: always
    volumes:
      - ./next-js/:/var/www/html/
      - ./logs/nginx:/var/log/nginx/
    networks:
      - public-network
    # depends_on:
    #   - item-api
    ports:
      - "80:80"

  next-js:
    container_name: next-js
    build:
      context: ./next-js
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./next-js/src:/app/src
      - ./next-js/public:/app/public
    restart: always
    extra_hosts:
      - "localhost:host-gateway"
    networks:
      - public-network

  graphql:
    container_name: graphql
    build:
      context: ./graphql
      dockerfile: dev.Dockerfile
    restart: always
    volumes:
      - ./graphql:/app
    networks:
      - public-network
      - service-network
    ports:
      - 8081:8080

  oauth:
    container_name: oauth
    build:
      context: ./oauth
      dockerfile: dev.Dockerfile
    restart: always
    networks:
      - public-network
    volumes:
      - ./oauth:/app
    extra_hosts:
      - "localhost:host-gateway"
    ports:
      - 8082:8080

  # # Service-api
  # service-api:
  #   container_name: service-api
  #   build:
  #     context: ./service-api/app
  #     dockerfile: dev.Dockerfile
  #   restart: always
  #   volumes:
  #     - ./service-api/app:/app
  #   networks:
  #     - service-network
  #   ports:
  #     - 8082:8080

  service-db:
    container_name: service-db
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - ./service-api/pg:/var/lib/postgresql/data
    networks:
      - service-network
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    networks:
      - service-network

networks:
  public-network:
  service-network:


