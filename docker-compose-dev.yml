version: '3.8'

services:
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: dev.Dockerfile
    volumes:
      - ./logs/nginx:/var/log/nginx/
    depends_on:
      app:
        condition: service_started
      auth:
        condition: service_started
      api:
        condition: service_started
    networks:
      - public-network
    ports:
      - "80:80"
    environment:
      - DOMAIN=${DOMAIN}
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_DOMAIN_INTERNAL=app
      - APP_PORT_INTERNAL=3000
      - API_DOMAIN=${API_DOMAIN}
      - API_DOMAIN_INTERNAL=api
      - API_PORT_INTERNAL=8080
      - AUTH_DOMAIN=${AUTH_DOMAIN}
      - AUTH_DOMAIN_INTERNAL=auth
      - AUTH_PORT_INTERNAL=8080

  app:
    container_name: app
    build:
      context: ./app
      dockerfile: docker/dev.Dockerfile
    volumes:
      - ./app/src:/app/src
      - ./app/public:/app/public
    networks:
      - public-network
    environment:
      - AUTH_URL=http://${AUTH_DOMAIN}
      - AUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - AUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_API_URL=http://${API_DOMAIN}
      - NEXTAUTH_URL=http://${APP_DOMAIN}/api/auth
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}

  api:
    container_name: api
    build:
      context: ./api
      dockerfile: dev.Dockerfile
    volumes:
      - ./api:/app
    networks:
      - public-network
      - service-network
    depends_on:
      service-postgres:
        condition: service_healthy
    environment:
      - ACCESS_TOKEN_SECRET=${API_ACCESS_TOKEN_SECRET}
      - APP_URL=http://${APP_DOMAIN}
      - DATABASE_HOST=service-postgres
      - DATABASE_USER=${SERVICE_POSTGRES_USER}
      - DATABASE_PASSWORD=${SERVICE_POSTGRES_PASSWORD}
      - DATABASE_PORT=${SERVICE_POSTGRES_PORT}
      - DATABASE_NAME=${SERVICE_POSTGRES_NAME}

  auth:
    container_name: auth
    build:
      context: ./auth/app
      dockerfile: dev.Dockerfile
    volumes:
      - ./auth/app:/app
    depends_on:
      auth-redis:
        condition: service_started
      auth-postgres:
        condition: service_healthy
    networks:
      - public-network
      - auth-network
    environment:
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - API_ACCESS_TOKEN_SECRET=${API_ACCESS_TOKEN_SECRET}
      - POSTGRES_HOST=auth-postgres
      - POSTGRES_USER=${AUTH_POSTGRES_USER}
      - POSTGRES_PASSWORD=${AUTH_POSTGRES_PASSWORD}
      - POSTGRES_PORT=${AUTH_POSTGRES_PORT}
      - POSTGRES_NAME=${AUTH_POSTGRES_NAME}
      - REDIS_HOST=auth-redis
      - REDIS_PORT=${AUTH_REDIS_PORT}
      - REDIS_PASSWORD=${AUTH_REDIS_PASSWORD}

  auth-redis:
    container_name: auth-redis
    image: "redis:alpine"
    command: redis-server --requirepass ${AUTH_REDIS_PASSWORD}
    volumes:
      - ./auth/redis/data:/var/lib/redis
    networks:
      - auth-network

  auth-postgres:
    container_name: auth-postgres
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: ${AUTH_POSTGRES_PASSWORD}
    volumes:
      - ./auth/pg/data:/var/lib/postgresql/data
    networks:
      - auth-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready'"]
      interval: 10s
      timeout: 3s
      retries: 3

  service-postgres:
    container_name: service-postgres
    image: postgres:alpine
    environment:
      POSTGRES_PASSWORD: ${SERVICE_POSTGRES_PASSWORD}
    volumes:
      - ./service/pg/data:/var/lib/postgresql/data
    networks:
      - service-network
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready'"]
      interval: 10s
      timeout: 3s
      retries: 3

networks:
  public-network:
  auth-network:
  service-network: 